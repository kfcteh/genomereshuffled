<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Genomics</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.2.3/css/bulma.min.css">
  <link rel="stylesheet" href="stylesheets/style.css">
</head>
<body>
  <script src="js/pixi.min.js"></script>

  <div class="tile is-ancestor">
    <div class="tile is-12 is-horizontal is-parent">
      <div class="tile is-child box has-text-centered">
        <p class="title">Drop File Here</p>
        <div id="dropbox"></div>
      </div>
      <div class="tile is-child box has-text-centered">
        <p class="title">File Contents</p>
        <div id="filecontents"></div>
      </div>
    </div>
  </div>
  <div class="tile is-ancestor">
    <div class="tile is-parent is-12 is-horizontal">
      <div class="tile is-child box">
        <p class="title">View</p>
        <div id="view"></div>
      </div>
    </div>
  </div>

<script>
function setup()
{
  const lengthScaleFactor = 10;
  const gapBetweenRailCars = 5;
  var x = 0;
  var imageIndex = 0;

  railCars.forEach(railCar => {
    var railCarSprite = new PIXI.Sprite(PIXI.loader.resources[images[imageIndex]].texture);
    stage.addChild(railCarSprite);
    railCarSprite.width = railCar.length/10;
    railCarSprite.height = 50;
    railCarSprite.x = x;

    x += railCar.length/lengthScaleFactor + gapBetweenRailCars;
    imageIndex += 1;

    if (imageIndex > 6) {
      imageIndex = 0;
    }
    
  });

  renderer.render(stage);
}
function renderRailCars()
{
  PIXI.loader
    .add(images)
    .load(setup);
}
function RailCar(startCoord,endCoord,name,length,polarity) {
  this.startCoord = startCoord;
  this.endCoord = endCoord;
  this.name = name;
  this.length = length;
  this.polarity = polarity;
}
function dragenter(e) {
  e.stopPropagation();
  e.preventDefault();
}
function dragover(e) {
  e.stopPropagation();
  e.preventDefault();
}
function drop(e) {
  e.stopPropagation();
  e.preventDefault();
  var dt = e.dataTransfer;
  var files = dt.files;
  handleFiles(files);
}
function handleFiles(files) {
  console.log("file was dropped!!!!!");
  var fr = new FileReader();

  fr.onload = function(e) {

    var rows = e.target.result.split("\n");

    rows.forEach(row => {

      var rowSplitData = row.split("\t");
      railCars.push(new RailCar(rowSplitData[1],rowSplitData[2],rowSplitData[5],rowSplitData[7],rowSplitData[8]));

      var para = document.createElement("p");
      var node = document.createTextNode(rowSplitData[1] + " " + rowSplitData[2] + " " + rowSplitData[5] + " " +rowSplitData[7] + " " + rowSplitData[8]);
      para.appendChild(node);

      var element = document.getElementById("filecontents");
      element.appendChild(para);

    });

    renderRailCars();
  };

  fr.readAsText(files[0]);
}

  var stage = new PIXI.Container();
  var renderer = PIXI.autoDetectRenderer(1400, 400,{backgroundColor : 0x000000});

  var view = document.getElementById("view");
  view.appendChild(renderer.view);

  var images = [
    "assets/1.jpg",
    "assets/2.jpg",
    "assets/3.jpg",
    "assets/4.jpg",
    "assets/5.jpg",
    "assets/6.jpg",
  ];

  var dropbox;
  var railCars = [];

  dropbox = document.getElementById("dropbox");
  dropbox.addEventListener("dragenter", dragenter, false);
  dropbox.addEventListener("dragover", dragover, false);
  dropbox.addEventListener("drop", drop, false);

</script>
</body>

</html>
